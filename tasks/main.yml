---
# tasks file for deploy-stack

- name: Set variables
  set_fact:
    yaml_file: "{{ deploy_stack_stack_file | basename }}"
    stack_name: "{{ (deploy_stack_stack_file | basename | splitext)[0] }}"

# Load YAMl as hash
- name: load yaml as hash
  include_vars:
    file: "{{ deploy_stack_stack_file }}"
    name: original_stack

- debug:
    msg: "{{ item.key }}"
  when: item.value is keyexists('traefik.port')
  with_dict: "{{ original_stack['services']}}"

# find the service expoxed, looking for traefik label
- name: find the service expoxed, looking for traefik label
  set_fact:
    exposed_service: "{{ item.key }}"
  when: item.value is keyexists('traefik.port')
  with_dict: "{{ original_stack['services']}}"

# insert own network
- name: insert network
  set_fact:
    stack: "{{ original_stack|combine({item.0: item.1}) }}"
  with_together:
    - ['networks']
    - "{{ [{ deploy_stack_traefik_backend_network : { 'external': True} }] }}"

# insert own network in the exposed service
- name: insert network in the service
  set_fact:
    stack: "{{ stack|combine({'services':{ exposed_service : {item.0: item.1}}}, recursive=True) }}"
  with_together:
    - ['networks']
    - [ [ [ "{{deploy_stack_traefik_backend_network}}" ] ] ]

- debug:
    var: stack


- name: Create the support folder
  file:
    path: "{{ deploy_stack_lib_folder }}"
    state: directory
    mode: 0755

- name: check existence
  command: "docker stack ps {{ stack_name }}"
  changed_when: false
  ignore_errors: true
  register: ps_out

- name: remove file if the file doesn't reflect the real status
  file:
    state: absent
    path: "{{ deploy_stack_lib_folder }}/{{ yaml_file }}"
  when: ps_out is failed

# write hash as yaml
- name: Write the yaml
  copy:
    content: "{{ stack | to_nice_yaml }}"
    dest: "{{ deploy_stack_lib_folder }}/{{ yaml_file }}"
  register: yamlcopying

- name: remove preexisting stack
  command: "docker stack rm {{ stack_name }}"
  when: 
    - ps_out is succeeded
    - yamlcopying is changed

- name: Deploy the stack
  command: "docker stack deploy --resolve-image never --compose-file {{ deploy_stack_lib_folder }}/{{ yaml_file }} {{ stack_name }}"
  when: yamlcopying.changed
  register: deploy_out
  ignore_errors: true

- name: remove file if something gone wrong
  file:
    state: absent
    path: "{{ deploy_stack_lib_folder }}/{{ yaml_file }}"
  when: deploy_out is failed

- fail:
    msg: "Impossible to deploy the stack {{ deploy_out }}"
  when: deploy_out is failed

